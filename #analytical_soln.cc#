#include<vector>
#include<iostream>
#include<cmath>
#include<fstream>
#include<algorithm>
#include<iomanip>

using namespace std;

// Function prototypes
double f(double x2);
double g(double x0, double x1, double x2_0,double x2_N, double t,double D);
void trapezoidal_integral(double (*func)(double),
			    const double &x_0,
			    const double &x_N,
			    const unsigned &numel,
			    double &total_int);
void trapezoidal_integral(double (*func)(double,double,double,
					 double,double,double),
			    const double &x_0,
			    const double &x_N,
			    const unsigned &numel,
			    double &total_int);
int main()
{

 double integrate_second;
 trapezoidal_integral(g,-100,100,300,integrate_second);
 std::cout<<integrate_second<<std::endl;
 
}



//Function implementations
double f(double x2)
{return 2*exp(-1000*(x2-0.5)*(x2-0.5));}

double g(double x0, double x1, double x2_0,double x2_N, double t,double D)
{
 double integrate_IC;
 unsigned numel=1000;
 //Integrating from 0 to x1
 //Doing the integral of the initial condition
 trapezoidal_integral(f,x2_0,x2_N,numel,integrate_IC);
 
 double second_integrand;
 second_integrand=exp(-pow((x0-x1),2)/(4*D*t)-2*D*integrate_IC);
 return second_integrand;
}

void trapezoidal_integral(double (*func)(double),
			    const double &x0_0,
			    const double &x0_N,
			    const unsigned &numel,
			    double &total_int)
{
 double section=0.0,a,b,dx=std::abs(x0_0-x0_N)/numel;
 total_int=0.0;
 for (unsigned i=0;i<numel;i++)
 {
  a=x0_0+i*dx;
  b=x0_0+(i+1)*dx;
  section= 0.5*(func(a)+func(b))*(b-a);
  total_int+=section;
 }
}

void trapezoidal_integral(double (*func)(double,double,double,
					 double,double,double),
			    const double &x1_0,
			    const double &x1_N,
			    const unsigned &numel,
			    double &total_int)
{
 double section=0.0,a,b,dx=std::abs(x1_0-x1_N)/numel;
 total_int=0.0;
 for (unsigned i=0;i<numel;i++)
 {
  a=x1_0+i*dx;
  b=x1_0+(i+1)*dx;
  section= 0.5*(func(0,a,0,0,0,0)+func(0,b,0,0,0,0))*(b-a);
  total_int+=section;
 }
}




